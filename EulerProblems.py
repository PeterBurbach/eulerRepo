# PROBLEM 1
# If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23
# Find the sum of all the multiples of 3 or 5 below 1000.

sum = 0 # create variable for the sum of all of the numbers
for integer in range(1000): # for loop which will cycle through every number UNDER 1000
    if (integer%3 == 0 or integer%5 == 0): # if number is divisible by 3 or 5
        sum += integer # add number to total sum
print(sum)

# COMPLETE : 233168


# PROBLEM 2
# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

evens_sum = 2 # set even sum to the already existing sum for evens just 2
number_list = [1,2] # create a list of numbers, starting with the two already existing
term_limit = True # declare term limit as true
while term_limit: 
        term = number_list[-1] + number_list[-2] # add together the last two values in the number_list
        if term <= 4000000: # if the term is less than or equal to the set value (4,000,000)
            if term%2 == 0: # if the term is even
                evens_sum += term # add the term to the sum of evens
            number_list.append(term) # append the term to the end of number_list
        else:
                term_limit = False # set term_limit to false once term limit is reached (stops while loop)
print('evens total: ', evens_sum)

# COMPLETE : 4613732


# PROBLEM 3
# The prime factors of 13195 are 5, 7, 13 and 29. What is the largest prime factor of the number 600851475143?

from primePy import primes # using primePy library might try to get another solution to work without it

last_num = 1
gatekeeper = 0
def recursive_prime_factoring(the_number):
    global last_num
    global gatekeeper
    for integer in range(last_num + 1, int(the_number + 1)):
            if gatekeeper == 0:
                for i in range(2, int(integer/2)+1):
                    if gatekeeper == 0: 
                        if (integer % i) == 0:
                                break
                    else:
                         break
                else:
                    last_num = integer
                    if the_number%integer == 0:
                        the_number = the_number/integer
                        static_num = the_number*integer 
                        if gatekeeper == 0: 
                            if primes.check(the_number):
                                if the_number == 1:
                                    print(static_num, "is its own highest prime factor")
                                    gatekeeper=1
                                    break   
                                else:
                                    print(the_number, "is the highest prime factor")
                                    gatekeeper=1
                                    break   
                            else:
                                last_num = 1
                                recursive_prime_factoring(the_number)
                        else:
                            break    
                    else:
                        recursive_prime_factoring(the_number)
recursive_prime_factoring(600851475143)

# a much simpler solution using primePy

from primePy import primes

high_prime_factor = max(primes.factors(600851475143))
print(high_prime_factor)

# COMPLETE : 6857


# PROBLEM 4
#  A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 times 99. Find the largest palindrome made from the product of two 3-digit numbers.

num3 = 0
num3_dict=[]
p_list=[]
gate = False
force = 1
power = 0
for num1 in range(100,1000):
    for num2 in range(100,1000):
            num3 = num1*num2
            num3_string = str(num3)
            for i in num3_string:
                    num3_dict.append(i)
            if len(num3_dict) == 6:
                if num3_dict[0] == num3_dict[-1] and num3_dict[1] == num3_dict[-2] and num3_dict[2] == num3_dict[-3]:
                    p_list.append(num3)
                else:
                    num3_dict.clear()
            else:
                    if num3_dict[0] == num3_dict[-1] and num3_dict[1] == num3_dict[-2]:
                        p_list.append(num3)
                    else:
                        num3_dict.clear()
last_p = 0
for p in p_list:
     if p > last_p:
          last_p = p
print("Largest palindrome:",last_p)

# COMPLETE : 906609


# PROBLEM 5
# 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
# What is the smallest positive number that is evenly divisible with no remainder by all of the numbers from 1 to 20?

num1 = 0
num2 = 2520 # any number divisible by 1 - 20 must be divisible by 2520
while num1 != 20:
    num1 = 0
    num2 += 2520
    for i in range(1,21):
        if num2 % i == 0:
            num1 += 1
print(num2)

# COMPLETE : 232792560


# PROBLEM 6
# Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.

sum = 0
sum1 = 0
def square(x):
     return x*x
for number in range(1,101):
     sum1 += number
     math = square(number)
     sum += math
sum1 = square(sum1)
diff = sum1 - sum
print(diff)

# COMPLETE : 25164150


# PROBLEM 7
# By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13. 
# What is the 10,001st prime number?
list = [1, 2, 3]
integer = 2
print(list.index(integer))

prime_list = []
for integer in range(2, 9999999):
        if len(prime_list) < 10001:
            for i in range(2, int(integer/2)+1):
                if (integer % i) == 0:
                    break
            else:
                prime_list.append(integer)
        else:
             print(prime_list[-1])
             break

# Easy solution with primePy
from primePy import primes
list = primes.first(10001)
print(list[-1])

# COMPLETE : 104743


# PROBLEM 8

# The four adjacent digits in the 1000-digit number that have the greatest product are 9 times 9 times 8 times 9 = 5832.
# 73167176531330624919225119674426574742355349194934
# 96983520312774506326239578318016984801869478851843
# 85861560789112949495459501737958331952853208805511
# 12540698747158523863050715693290963295227443043557
# 66896648950445244523161731856403098711121722383113
# 62229893423380308135336276614282806444486645238749
# 30358907296290491560440772390713810515859307960866
# 70172427121883998797908792274921901699720888093776
# 65727333001053367881220235421809751254540594752243
# 52584907711670556013604839586446706324415722155397
# 53697817977846174064955149290862569321978468622482
# 83972241375657056057490261407972968652414535100474
# 82166370484403199890008895243450658541227588666881
# 16427171479924442928230863465674813919123162824586
# 17866458359124566529476545682848912883142607690042
# 24219022671055626321111109370544217506941658960408
# 07198403850962455444362981230987879927244284909188
# 84580156166097919133875499200524063689912560717606
# 05886116467109405077541002256983155200055935729725
# 71636269561882670428252483600823257530420752963450
# Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?

number_str = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"
last_sum = 0
number_list = []
sum_list = []

for digit in number_str:
     number_list.append(digit)

for start_point in range(0,989):
     sum = 1
     for number in range(start_point,start_point+13):
          sum *= int(number_list[start_point])
          start_point += 1
     sum_list.append(sum)

for sum in sum_list:
     if sum > last_sum:
          last_sum = sum
print(last_sum)

# COMPLETE : 23514624000


# PROBLEM 9
# A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,a^2 + b^2 = c^2. For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.
# There exists exactly one Pythagorean triplet for which a + b + c = 1000.Find the product abc.
x = 1000
for nu in range(x):
    c = nu
    r = x - c
    if r<c:
        for num in range(int(0.5*r+1),r):
            b = num
            a = x - (num + c)
            if (a*a) + (b*b) == (c*c):
                print(a,'*',b,'*',c,'=',a*b*c)
                break
    else:
        for numb in range(int(0.5*c+1),c):
            b = numb
            a = x - (numb + c)
            if (a*a) + (b*b) == (c*c):
                print(a,'*',b,'*',c,'=',a*b*c)
                break

# COMPLETE : 31875000


# PROBLEM 10
# The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17. Find the sum of all the primes below two million.

from primePy import primes
a = prime_list.upto(2000000)
sum = sum(a)
print(sum)

# COMPLETE : 142913828922